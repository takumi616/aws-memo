Docker環境のPostgreSQLコンテナに対して`go-migrate`コマンドを実行する場合、以下の点を考慮してコマンドを調整する必要があります：

1. **ホスト名**: `localhost`をDockerコンテナのサービス名（またはコンテナ名）に変更する必要があります。たとえば、`docker-compose.yml`でPostgreSQLサービスが`postgres`という名前で定義されている場合、`localhost`を`postgres`に置き換えます。
2. **ポート**: Dockerコンテナの外部からアクセスする場合、コンテナのポート（デフォルトは5432）がホストにマッピングされているポート番号に一致する必要があります。ただし、同一ネットワーク内で動作する場合はコンテナ内部のポート（通常5432）をそのまま使用します。
3. **Dockerネットワーク**: コマンドを実行する環境がコンテナと同じDockerネットワーク内にあることを確認してください。そうでない場合、`docker run`や`docker exec`を使用してコンテナ内部でコマンドを実行する必要があります。

以下に具体的な例を示します。状況に応じて適切な方法を選んでください。

---

### 状況1: Docker Composeを使用している場合
`docker-compose.yml`でPostgreSQLサービスが以下のように定義されていると仮定します：
```yaml
services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: username
      POSTGRES_PASSWORD: password
      POSTGRES_DB: dbname
    ports:
      - "5432:5432"
```

この場合、同一ネットワーク内で動作する前提で、以下のようにコマンドを修正します。

#### 1. `migrate create`コマンド
このコマンドはマイグレーションファイルをローカルで作成するだけなので、データベースに接続せず、そのまま使用できます：
```bash
migrate create -ext sql -dir migrations -seq create_users_table
```

#### 2. `migrate up`コマンド
データベース接続が必要なので、ホスト名を`postgres`（サービス名）に変更します：
```bash
migrate -path migrations -database "postgres://username:password@postgres:5432/dbname?sslmode=disable" up
```
- `localhost`を`postgres`に変更。
- Docker Composeのデフォルトネットワーク内で実行する場合、サービス名で解決されるためこれで動作します。

---

### 状況2: ローカルから直接実行する場合
Dockerコンテナがローカルで動作しており、ホストのポート5432にマッピングされている場合、ローカル環境からそのまま接続できます。この場合、元のコマンドをほぼそのまま使用できます：
```bash
migrate -path migrations -database "postgres://username:password@localhost:5432/dbname?sslmode=disable" up
```
ただし、ポートが異なる場合は、`docker ps`で確認したホストにマッピングされたポート番号（例: `5433`）に変更してください：
```bash
migrate -path migrations -database "postgres://username:password@localhost:5433/dbname?sslmode=disable" up
```

---

### 状況3: Dockerコンテナ内でコマンドを実行する場合
`go-migrate`をコンテナ内で実行したい場合、たとえば以下のようにDockerイメージを作成し、コンテナ内でコマンドを実行します。

1. Dockerfileを作成（例）：
```Dockerfile
FROM golang:latest
RUN go install github.com/golang-migrate/migrate/v4/cmd/migrate@latest
WORKDIR /app
COPY migrations /app/migrations
CMD ["migrate", "-path", "migrations", "-database", "postgres://username:password@postgres:5432/dbname?sslmode=disable", "up"]
```

2. Docker Composeでサービスとして追加：
```yaml
services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: username
      POSTGRES_PASSWORD: password
      POSTGRES_DB: dbname
    ports:
      - "5432:5432"
  migrate:
    build: .
    depends_on:
      - postgres
```

3. 実行：
```bash
docker-compose up migrate
```

---

### 推奨アプローチ
- **簡単さ**を求めるなら「状況1」のDocker Composeを使用し、同一ネットワーク内でコマンドを実行するのが一般的です。
- **独立性**を求めるなら「状況3」のようにコンテナ化してマイグレーションを実行する方法がCI/CDパイプラインでも使いやすいです。

質問があれば、さらに具体的な状況を教えていただければ調整します！






Docker Composeを使用している「状況1」で、同一ネットワーク内でコマンドを実行するためには、以下のように設定を行います。同一ネットワークとは、Docker Composeが自動的に作成するデフォルトネットワークを指します。このネットワーク内でサービス同士が名前解決（サービス名で通信）できるようにするため、特別な設定はほとんど不要ですが、具体的な手順と確認ポイントを説明します。

---

### 1. Docker Composeのデフォルトネットワークの仕組み
Docker Composeを使用すると、プロジェクトごとにデフォルトのブリッジネットワークが自動的に作成されます。このネットワーク内で、サービス名（例: `postgres`）がホスト名として解決されます。たとえば、以下のような`docker-compose.yml`がある場合：

```yaml
services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: username
      POSTGRES_PASSWORD: password
      POSTGRES_DB: dbname
    ports:
      - "5432:5432"
```

- `postgres`サービスがデフォルトネットワークに参加します。
- 同一ネットワーク内の他のサービスやコンテナから、`postgres`という名前で通信できます。

---

### 2. 同一ネットワーク内でコマンドを実行する方法
`migrate`コマンドを同一ネットワーク内で実行するには、次のいずれかの方法を選びます。

#### 方法1: ローカルでコマンドを実行する場合
ローカルマシンからコマンドを実行する際、Docker Composeのネットワークに接続するわけではないため、ホストマシンのポートマッピング（例: `localhost:5432`）を使用するか、コンテナのIPアドレスを指定する必要があります。しかし、同一ネットワーク内で直接実行する場合は、以下のようにコンテナ内で実行する方が自然です。

#### 方法2: 一時的なコンテナで実行
同一ネットワーク内でコマンドを実行するには、Dockerの`run`コマンドを使って一時的なコンテナを起動し、`postgres`サービスに接続します。たとえば：

```bash
docker run --rm --network <network_name> golang:latest bash -c "go install github.com/golang-migrate/migrate/v4/cmd/migrate@latest && migrate -path migrations -database 'postgres://username:password@postgres:5432/dbname?sslmode=disable' up"
```

- `--network <network_name>`: Docker Composeのネットワーク名を指定します。ネットワーク名は`docker network ls`で確認でき、通常は`<プロジェクト名>_default`（例: `myproject_default`）です。
- `<プロジェクト名>`は`docker-compose.yml`があるディレクトリの名前か、`COMPOSE_PROJECT_NAME`環境変数で指定された名前です。

ネットワーク名を確認するには：
```bash
docker network ls
```
出力例：
```
NETWORK ID     NAME              DRIVER    SCOPE
abc123def456   myproject_default bridge    local
```
この場合、`--network myproject_default`を指定します。

#### 方法3: Docker Composeにサービスとして追加
より簡単で再利用可能な方法として、`docker-compose.yml`に`migrate`サービスを追加し、同一ネットワーク内で実行します。

```yaml
services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: username
      POSTGRES_PASSWORD: password
      POSTGRES_DB: dbname
    ports:
      - "5432:5432"
  migrate:
    image: golang:latest
    command: bash -c "go install github.com/golang-migrate/migrate/v4/cmd/migrate@latest && migrate -path /migrations -database 'postgres://username:password@postgres:5432/dbname?sslmode=disable' up"
    volumes:
      - ./migrations:/migrations
    depends_on:
      - postgres
```

- `depends_on`: `postgres`サービスが起動してから`migrate`が実行されるようにします。
- `volumes`: ローカルの`migrations`ディレクトリをコンテナにマウントします。
- `postgres`というホスト名が同一ネットワーク内で解決されます。

実行コマンド：
```bash
docker-compose up migrate
```

---

### 3. ネットワーク設定の確認
同一ネットワークが正しく動作しているか確認するには：

#### ネットワークの確認
```bash
docker network ls
docker network inspect <network_name>
```
`Containers`セクションに`postgres`サービスが含まれていることを確認してください。

#### 接続テスト
同一ネットワーク内で通信できるかテストするには、以下のように一時コンテナを起動して確認します：
```bash
docker run --rm --network <network_name> postgres:latest psql -h postgres -U username -d dbname
```
パスワードを求められたら`password`を入力し、接続できればネットワーク設定は正しいです。

---

### 4. 推奨設定
**方法3（Docker Composeにサービス追加）**が最も簡単で管理しやすいです。以下が最終的な`docker-compose.yml`の例です：

```yaml
version: '3'
services:
  postgres:
    image: postgres:latest
    environment:
      POSTGRES_USER: username
      POSTGRES_PASSWORD: password
      POSTGRES_DB: dbname
    ports:
      - "5432:5432"
  migrate:
    image: golang:latest
    command: bash -c "go install github.com/golang-migrate/migrate/v4/cmd/migrate@latest && migrate -path /migrations -database 'postgres://username:password@postgres:5432/dbname?sslmode=disable' up"
    volumes:
      - ./migrations:/migrations
    depends_on:
      - postgres
```

#### 実行手順
1. `docker-compose.yml`を保存。
2. ターミナルで以下を実行：
   ```bash
   docker-compose up -d postgres  # PostgreSQLをバックグラウンドで起動
   docker-compose up migrate      # マイグレーションを実行
   ```

これで、`migrate`コマンドが同一ネットワーク内で`postgres`コンテナに接続し、マイグレーションが実行されます。

---

### 補足
- **初回接続の遅延**: PostgreSQLコンテナが起動直後の場合、接続が拒否されることがあります。その場合、`depends_on`に`condition: service_healthy`を追加するか、スクリプトでリトライロジックを組むと良いです。
- **カスタムネットワーク**: 必要に応じて`networks`セクションで独自のネットワークを定義できますが、デフォルトで十分な場合がほとんどです。

何か不明点があれば教えてください！