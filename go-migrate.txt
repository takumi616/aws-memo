`golang-migrate/migrate` をCLIツールとして使用してデータベースマイグレーションを実行する手順(PostgreSQLを対象)

---

### 前提条件
1. **Go環境**: Goがインストールされている（CLIツールをビルドするため）。
2. **データベース**: PostgreSQLが稼働中で、接続情報（ユーザー名、パスワード、ホストなど）が準備済み。
3. **プロジェクト**: マイグレーションファイルを管理するディレクトリ（例: `migrations`）がある。

---

### 手順

#### 1. `golang-migrate/migrate` CLIツールのインストール
CLIツールを使用するには、まずインストールします。以下のコマンドを実行します：

```bash
go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
```

- `-tags 'postgres'`: 使用するデータベースに応じてタグを指定（例: `mysql`、`sqlite` など）。
- インストール後、`migrate` コマンドが使えるようになります。PATHに `$GOPATH/bin` が含まれていることを確認してください。

確認:
```bash
migrate -version
```
バージョンが表示されればOKです。

---

#### 2. マイグレーションファイルの作成
マイグレーションファイルは、SQL形式で `up`（適用）と `down`（ロールバック）のスクリプトを記述します。

1. **ディレクトリ作成**:
   ```bash
   mkdir migrations
   ```

2. **マイグレーションファイルの作成**:
   `migrate create` コマンドで雛形を生成します。ファイル名にはタイムスタンプと名前が含まれます。
   ```bash
   migrate create -ext sql -dir migrations -seq create_users_table
   ```
   - `-ext sql`: 拡張子を `sql` に指定。
   - `-dir migrations`: マイグレーションファイルを保存するディレクトリ。
   - `-seq`: シーケンシャルな番号を付ける（オプション）。
   - `create_users_table`: マイグレーションの名前。

   実行すると、以下のようなファイルが生成されます:
   ```
   migrations/20250313123456_create_users_table.up.sql
   migrations/20250313123456_create_users_table.down.sql
   ```

3. **SQL記述**:
   - `up.sql`（テーブル作成など）:
     ```sql
     CREATE TABLE users (
         id SERIAL PRIMARY KEY,
         name VARCHAR(255) NOT NULL,
         created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
     );
     ```
   - `down.sql`（ロールバック用）:
     ```sql
     DROP TABLE users;
     ```

---

#### 3. データベース接続情報の準備
マイグレーションを実行するには、データベースの接続URLが必要です。例:
```
postgres://username:password@localhost:5432/dbname?sslmode=disable
```
- 本番環境では、この情報を環境変数（例: `DATABASE_URL`）で管理するのが一般的です。

---

#### 4. マイグレーションの実行
CLIを使ってマイグレーションを適用します。

1. **マイグレーション適用（up）**:
   ```bash
   migrate -path migrations -database "postgres://username:password@localhost:5432/dbname?sslmode=disable" up
   ```
   - `-path`: マイグレーションファイルのディレクトリ。
   - `-database`: データベース接続URL。
   - `up`: 全ての未適用のマイグレーションを実行。

   成功すると、コンソールに適用されたマイグレーションが表示されます。

2. **ロールバック（down）**:
   必要に応じて、最後に適用したマイグレーションをロールバックします。
   ```bash
   migrate -path migrations -database "postgres://username:password@localhost:5432/dbname?sslmode=disable" down
   ```

3. **特定のバージョンへの移動**:
   特定バージョンまで適用したい場合:
   ```bash
   migrate -path migrations -database "postgres://..." goto 20250313123456
   ```

4. **状態確認**:
   現在のマイグレーション状態を確認:
   ```bash
   migrate -path migrations -database "postgres://..." version
   ```

---

#### 5. エラー対応
- **Dirty状態**: マイグレーションが途中で失敗した場合、「dirty」とマークされることがあります。強制的に修正するには:
  ```bash
  migrate -path migrations -database "postgres://..." force 20250313123456
  ```
  （注意: 慎重に使用してください）

---

#### 6. CI/CDパイプラインへの組み込み（オプション）
本番環境でマイグレーションを自動化する場合、CI/CDツールに組み込みます。例としてGitHub Actionsのワークフローを示します:

```yaml
name: Deploy
on:
  push:
    branches:
      - main
jobs:
  migrate:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Install migrate
        run: go install -tags 'postgres' github.com/golang-migrate/migrate/v4/cmd/migrate@latest
      - name: Run migrations
        run: |
          migrate -path migrations -database "${{ secrets.DATABASE_URL }}" up
```

- `secrets.DATABASE_URL`: GitHubのシークレットでデータベース接続情報を管理。

---

### 具体例（手動実行の流れ）
1. **環境**:
   - PostgreSQLが `localhost:5432` で動作。
   - データベース名: `mydb`, ユーザー: `admin`, パスワード: `pass123`。

2. **コマンド**:
   ```bash
   # マイグレーションファイル作成
   migrate create -ext sql -dir migrations -seq create_users_table

   # up.sql と down.sql を編集

   # マイグレーション実行
   migrate -path migrations -database "postgres://admin:pass123@localhost:5432/mydb?sslmode=disable" up
   ```

3. **結果確認**:
   データベースに `users` テーブルが作成されていることを確認。

---

### 注意点
- **バージョン管理**: マイグレーションファイルはGitで管理し、チームで共有。
- **接続情報**: 本番ではハードコーディングせず、環境変数や設定ファイルを使用。
- **テスト**: ローカルやステージング環境で試してから本番適用。

---